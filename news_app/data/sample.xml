{'feed': {'title': 'The Mouse Vs. The Python', 'title_detail': {'type': 'text/plain', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': 'The Mouse Vs. The Python'}, 'links': [{'href': 'http://www.blog.pythonlibrary.org/feed/', 'rel': 'self', 'type': 'application/rss+xml'}, {'rel': 'alternate', 'type': 'text/html', 'href': 'http://www.blog.pythonlibrary.org'}], 'link': 'http://www.blog.pythonlibrary.org', 'subtitle': 'Python Programming from the Frontlines', 'subtitle_detail': {'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': 'Python Programming from the Frontlines'}, 'updated': 'Thu, 18 Jul 2019 21:01:29 +0000', 'updated_parsed': time.struct_time(tm_year=2019, tm_mon=7, tm_mday=18, tm_hour=21, tm_min=1, tm_sec=29, tm_wday=3, tm_yday=199, tm_isdst=0), 'language': 'en-US', 'sy_updateperiod': 'hourly', 'sy_updatefrequency': '1', 'generator_detail': {'name': 'https://wordpress.org/?v=5.2.2'}, 'generator': 'https://wordpress.org/?v=5.2.2'}, 'entries': [{'title': 'New Malicious Python Libraries Found Targeting Linux', 'title_detail': {'type': 'text/plain', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': 'New Malicious Python Libraries Found Targeting Linux'}, 'links': [{'rel': 'alternate', 'type': 'text/html', 'href': 'http://www.blog.pythonlibrary.org/2019/07/18/new-malicious-python-libraries-found-targeting-linux/'}], 'link': 'http://www.blog.pythonlibrary.org/2019/07/18/new-malicious-python-libraries-found-targeting-linux/', 'comments': 'http://www.blog.pythonlibrary.org/2019/07/18/new-malicious-python-libraries-found-targeting-linux/#respond', 'published': 'Thu, 18 Jul 2019 21:00:55 +0000', 'published_parsed': time.struct_time(tm_year=2019, tm_mon=7, tm_mday=18, tm_hour=21, tm_min=0, tm_sec=55, tm_wday=3, tm_yday=199, tm_isdst=0), 'authors': [{'name': 'Mike'}], 'author': 'Mike', 'author_detail': {'name': 'Mike'}, 'tags': [{'term': 'Python', 'scheme': None, 'label': None}, {'term': 'malware', 'scheme': None, 'label': None}], 'id': 'http://www.blog.pythonlibrary.org/?p=8551', 'guidislink': False, 'summary': '<p>ZDNet published an article recently about a newly discovered set of malware-related Python packages on the Python Package Index (PyPI). These packages contained a backdoor that would only activate when installed on Linux. These packages were named: libpeshnx libpesh libar They were written by a user named ruri12. These packages were removed by the PyPI &#8230; <a href="http://www.blog.pythonlibrary.org/2019/07/18/new-malicious-python-libraries-found-targeting-linux/" class="more-link">Continue reading <span class="screen-reader-text">New Malicious Python Libraries Found Targeting Linux</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/18/new-malicious-python-libraries-found-targeting-linux/">New Malicious Python Libraries Found Targeting Linux</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>', 'summary_detail': {'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<p>ZDNet published an article recently about a newly discovered set of malware-related Python packages on the Python Package Index (PyPI). These packages contained a backdoor that would only activate when installed on Linux. These packages were named: libpeshnx libpesh libar They were written by a user named ruri12. These packages were removed by the PyPI &#8230; <a href="http://www.blog.pythonlibrary.org/2019/07/18/new-malicious-python-libraries-found-targeting-linux/" class="more-link">Continue reading <span class="screen-reader-text">New Malicious Python Libraries Found Targeting Linux</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/18/new-malicious-python-libraries-found-targeting-linux/">New Malicious Python Libraries Found Targeting Linux</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}, 'content': [{'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<div class="pf-content"><p>ZDNet published an <a href="https://www.zdnet.com/article/malicious-python-libraries-targeting-linux-servers-removed-from-pypi/" rel="noopener noreferrer" target="_blank">article</a> recently about a newly discovered set of malware-related Python packages on the Python Package Index (PyPI). These packages contained a backdoor that would only activate when installed on Linux.</p>\n<p>These packages were named:</p>\n<ul>\n<li>libpeshnx</li>\n<li>libpesh</li>\n<li>libar</li>\n</ul>\n<p>They were written by a user named <strong>ruri12</strong>. These packages were removed by the PyPI team on July 9, 2019. However they were available since November 2017 and had been downloaded fairly regularly.</p>\n<p>See the original <a href="https://www.zdnet.com/article/malicious-python-libraries-targeting-linux-servers-removed-from-pypi/" rel="noopener noreferrer" target="_blank">article</a> for more details.</p>\n<p>As always, when using a package that you aren&#8217;t familiar with, be sure to do your own thorough vetting to be sure you are not installing malware accidentally.</p>\n<h3>Related Reading</h3>\n<ul>\n<li>ZDNet &#8211; <a href="https://www.zdnet.com/article/malicious-python-libraries-targeting-linux-servers-removed-from-pypi/" rel="noopener noreferrer" target="_blank">Malicious Python libraries targeting Linux servers removed from PyPI</a></li>\n<li>More typo-squatting Malware <a href="https://www.blog.pythonlibrary.org/2018/10/31/more-typo-squatting-malware-found-on-pypi/" rel="noopener noreferrer" target="_blank">Found on PyPI</a></li>\n<li>Malicious Libraries Found on <a href="https://www.blog.pythonlibrary.org/2017/09/15/malicious-libraries-found-on-python-package-index-pypi/" rel="noopener noreferrer" target="_blank">Python Package Index (PyPI)</a></li>\n</ul>\n</div><p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F18%2Fnew-malicious-python-libraries-found-targeting-linux%2F&amp;linkname=New%20Malicious%20Python%20Libraries%20Found%20Targeting%20Linux" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F18%2Fnew-malicious-python-libraries-found-targeting-linux%2F&amp;linkname=New%20Malicious%20Python%20Libraries%20Found%20Targeting%20Linux" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F18%2Fnew-malicious-python-libraries-found-targeting-linux%2F&#038;title=New%20Malicious%20Python%20Libraries%20Found%20Targeting%20Linux" data-a2a-url="http://www.blog.pythonlibrary.org/2019/07/18/new-malicious-python-libraries-found-targeting-linux/" data-a2a-title="New Malicious Python Libraries Found Targeting Linux"></a></p><p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/18/new-malicious-python-libraries-found-targeting-linux/">New Malicious Python Libraries Found Targeting Linux</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}], 'wfw_commentrss': 'http://www.blog.pythonlibrary.org/2019/07/18/new-malicious-python-libraries-found-targeting-linux/feed/', 'slash_comments': '0'}, {'title': 'Intro to Black – The Uncompromising Python Code Formatter', 'title_detail': {'type': 'text/plain', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': 'Intro to Black – The Uncompromising Python Code Formatter'}, 'links': [{'rel': 'alternate', 'type': 'text/html', 'href': 'http://www.blog.pythonlibrary.org/2019/07/16/intro-to-black-the-uncompromising-python-code-formatter/'}], 'link': 'http://www.blog.pythonlibrary.org/2019/07/16/intro-to-black-the-uncompromising-python-code-formatter/', 'comments': 'http://www.blog.pythonlibrary.org/2019/07/16/intro-to-black-the-uncompromising-python-code-formatter/#respond', 'published': 'Tue, 16 Jul 2019 05:05:16 +0000', 'published_parsed': time.struct_time(tm_year=2019, tm_mon=7, tm_mday=16, tm_hour=5, tm_min=5, tm_sec=16, tm_wday=1, tm_yday=197, tm_isdst=0), 'authors': [{'name': 'Mike'}], 'author': 'Mike', 'author_detail': {'name': 'Mike'}, 'tags': [{'term': 'Python', 'scheme': None, 'label': None}, {'term': 'Python 3', 'scheme': None, 'label': None}], 'id': 'http://www.blog.pythonlibrary.org/?p=8452', 'guidislink': False, 'summary': '<p>There are several Python code checkers available. For example, a lot of developers enjoy using Pylint or Flake8 to check their code for errors. These tools use static code analysis to check your code for bugs or naming issues. Flake8 will also check your code to see if you are adhering to PEP8, Python&#8217;s style &#8230; <a href="http://www.blog.pythonlibrary.org/2019/07/16/intro-to-black-the-uncompromising-python-code-formatter/" class="more-link">Continue reading <span class="screen-reader-text">Intro to Black &#8211; The Uncompromising Python Code Formatter</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/16/intro-to-black-the-uncompromising-python-code-formatter/">Intro to Black &#8211; The Uncompromising Python Code Formatter</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>', 'summary_detail': {'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<p>There are several Python code checkers available. For example, a lot of developers enjoy using Pylint or Flake8 to check their code for errors. These tools use static code analysis to check your code for bugs or naming issues. Flake8 will also check your code to see if you are adhering to PEP8, Python&#8217;s style &#8230; <a href="http://www.blog.pythonlibrary.org/2019/07/16/intro-to-black-the-uncompromising-python-code-formatter/" class="more-link">Continue reading <span class="screen-reader-text">Intro to Black &#8211; The Uncompromising Python Code Formatter</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/16/intro-to-black-the-uncompromising-python-code-formatter/">Intro to Black &#8211; The Uncompromising Python Code Formatter</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}, 'content': [{'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<div class="pf-content"><p>There are several Python code checkers available. For example, a lot of developers enjoy using <a href="https://www.pylint.org/" rel="noopener noreferrer" target="_blank">Pylint</a> or <a href="http://flake8.pycqa.org/en/latest/" rel="noopener noreferrer" target="_blank">Flake8</a> to check their code for errors. These tools use static code analysis to check your code for bugs or naming issues. Flake8 will also check your code to see if you are adhering to <a href="https://www.python.org/dev/peps/pep-0008/" rel="noopener noreferrer" target="_blank">PEP8</a>, Python&#8217;s style guide.</p>\n<p>However there is a new tool that you can use called <a href="https://github.com/python/black" rel="noopener noreferrer" target="_blank">Black</a>. Black is a Python code formatter. It will reformat your entire file in place according to the Black code style, which is pretty close to PEP8.</p>\n<hr/>\n<h3>Installation</h3>\n<p>Installing Black is easy. You can just use pip for that:</p>\n<pre class="python">pip install black</pre>\n<p>You can also configure popular text editors and IDEs to use Black following these <a href="https://github.com/python/black#editor-integration" rel="noopener noreferrer" target="_blank">instructions</a>.</p>\n<p>Now that Black is installed, let&#8217;s give it a try!<span id="more-8452"></span></p>\n<hr/>\n<h3>Using Black</h3>\n<p>Black requires you to have some code to run it against. Let&#8217;s create a simple function that has lots of parameters and then run Black on that script.</p>\n<p>Here&#8217;s an example:</p>\n<pre class="python"><span style="color: #ff7700;font-weight:bold;">def</span> long_func<span style="color: black;">&#40;</span>x, param_one=<span style="color: #008000;">None</span>, param_two=<span style="color: black;">&#91;</span><span style="color: black;">&#93;</span>, param_three=<span style="color: black;">&#123;</span><span style="color: black;">&#125;</span>, param_four=<span style="color: #008000;">None</span>, param_five=<span style="color: #483d8b;">&quot;&quot;</span>, param_six=<span style="color: #ff4500;">123456</span><span style="color: black;">&#41;</span>:\n    <span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">&quot;This function has several params&quot;</span><span style="color: black;">&#41;</span></pre>\n<p>Now in your terminal, try running <code>black</code> against your code file like this:</p>\n<p><code><br />\nblack long_func.py<br />\n</code></p>\n<p>When you run this command, you should see the following output:</p>\n<p><code><br />\nreformatted long_func.py<br />\nAll done! &#x2728; &#x1f370; &#x2728;<br />\n1 file reformatted.<br />\n</code></p>\n<p>This means that your file has been reformatted to follow the Black standard. </p>\n<p>Let&#8217;s open the file up and see what it looks like:</p>\n<pre class="python"><span style="color: #ff7700;font-weight:bold;">def</span> long_func<span style="color: black;">&#40;</span>\n    x,\n    param_one=<span style="color: #008000;">None</span>,\n    param_two=<span style="color: black;">&#91;</span><span style="color: black;">&#93;</span>,\n    param_three=<span style="color: black;">&#123;</span><span style="color: black;">&#125;</span>,\n    param_four=<span style="color: #008000;">None</span>,\n    param_five=<span style="color: #483d8b;">&quot;&quot;</span>,\n    param_six=<span style="color: #ff4500;">123456</span>,\n<span style="color: black;">&#41;</span>:\n    <span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">&quot;This function has several params&quot;</span><span style="color: black;">&#41;</span></pre>\n<p>As you can see, Black has put each of the parameters on their own line.</p>\n<hr/>\n<h3>Checking Files for Formatting</h3>\n<p>If you don&#8217;t want Black to change your file, but you want to know if Black thinks a file should be changed, you can use one of the following command flags:</p>\n<ul>\n<li><code>--check</code> &#8211; which checks if the file should be reformatted, but doesn&#8217;t actually modify the file</li>\n<li><code>--diff</code> &#8211; which writes out a diff of what Black would do to the file, but doesn&#8217;t modify the file</li>\n</ul>\n<p>I like to use these to do a test run on my files and see how Black will reformat my code. I haven&#8217;t been using Black a long time, so this let&#8217;s me see if I like what Black is going to do without actually doing anything.</p>\n<hr/>\n<h3>Wrapping Up</h3>\n<p>I like Black. I think it could be really useful, especially in an organization when it comes to enforcing a certain Python style. Note that Black defaults to 88 characters for its line length, but you can change that using <code>-l</code> or <code>--line-length</code> if you need to. There are also a few other options you might find useful listed on the <a href="https://github.com/python/black" rel="noopener noreferrer" target="_blank">project&#8217;s page</a>. If you get a chance, I think you should give Black a try!</p>\n<hr/>\n<h3>Related Reading</h3>\n<ul>\n<li>PyLint: <a href="https://www.blog.pythonlibrary.org/2012/06/12/pylint-analyzing-python-code/" rel="noopener noreferrer" target="_blank">Analyzing Python Code</a></li>\n<li>pyflakes – <a href="https://www.blog.pythonlibrary.org/2012/06/13/pyflakes-the-passive-checker-of-python-programs/" rel="noopener noreferrer" target="_blank">the passive checker of Python programs</a></li>\n<li>Python 101: <a href="https://www.blog.pythonlibrary.org/2018/11/07/python-101-episode-32-static-code-analysis/" rel="noopener noreferrer" target="_blank">Episode #32 – Static Code Analysis</a></li>\n</ul>\n</div><p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F16%2Fintro-to-black-the-uncompromising-python-code-formatter%2F&amp;linkname=Intro%20to%20Black%20%E2%80%93%20The%20Uncompromising%20Python%20Code%20Formatter" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F16%2Fintro-to-black-the-uncompromising-python-code-formatter%2F&amp;linkname=Intro%20to%20Black%20%E2%80%93%20The%20Uncompromising%20Python%20Code%20Formatter" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F16%2Fintro-to-black-the-uncompromising-python-code-formatter%2F&#038;title=Intro%20to%20Black%20%E2%80%93%20The%20Uncompromising%20Python%20Code%20Formatter" data-a2a-url="http://www.blog.pythonlibrary.org/2019/07/16/intro-to-black-the-uncompromising-python-code-formatter/" data-a2a-title="Intro to Black – The Uncompromising Python Code Formatter"></a></p><p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/16/intro-to-black-the-uncompromising-python-code-formatter/">Intro to Black &#8211; The Uncompromising Python Code Formatter</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}], 'wfw_commentrss': 'http://www.blog.pythonlibrary.org/2019/07/16/intro-to-black-the-uncompromising-python-code-formatter/feed/', 'slash_comments': '0'}, {'title': 'PyDev of the Week: Meg Ray', 'title_detail': {'type': 'text/plain', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': 'PyDev of the Week: Meg Ray'}, 'links': [{'rel': 'alternate', 'type': 'text/html', 'href': 'http://www.blog.pythonlibrary.org/2019/07/15/pydev-of-the-week-meg-ray/'}], 'link': 'http://www.blog.pythonlibrary.org/2019/07/15/pydev-of-the-week-meg-ray/', 'comments': 'http://www.blog.pythonlibrary.org/2019/07/15/pydev-of-the-week-meg-ray/#comments', 'published': 'Mon, 15 Jul 2019 05:05:47 +0000', 'published_parsed': time.struct_time(tm_year=2019, tm_mon=7, tm_mday=15, tm_hour=5, tm_min=5, tm_sec=47, tm_wday=0, tm_yday=196, tm_isdst=0), 'authors': [{'name': 'Mike'}], 'author': 'Mike', 'author_detail': {'name': 'Mike'}, 'tags': [{'term': 'PyDevOfTheWeek', 'scheme': None, 'label': None}, {'term': 'Python', 'scheme': None, 'label': None}], 'id': 'http://www.blog.pythonlibrary.org/?p=8468', 'guidislink': False, 'summary': '<p>This week we welcome Meg Ray (@teach_python) as our PyDev of the Week! Meg teaches programming to other teachers and has developed Python-related curriculum. Meg is also the author of Code This Game, a book which will be coming out in August 2019. Let&#8217;s take some time to get to know her better! Can you &#8230; <a href="http://www.blog.pythonlibrary.org/2019/07/15/pydev-of-the-week-meg-ray/" class="more-link">Continue reading <span class="screen-reader-text">PyDev of the Week: Meg Ray</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/15/pydev-of-the-week-meg-ray/">PyDev of the Week: Meg Ray</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>', 'summary_detail': {'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<p>This week we welcome Meg Ray (@teach_python) as our PyDev of the Week! Meg teaches programming to other teachers and has developed Python-related curriculum. Meg is also the author of Code This Game, a book which will be coming out in August 2019. Let&#8217;s take some time to get to know her better! Can you &#8230; <a href="http://www.blog.pythonlibrary.org/2019/07/15/pydev-of-the-week-meg-ray/" class="more-link">Continue reading <span class="screen-reader-text">PyDev of the Week: Meg Ray</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/15/pydev-of-the-week-meg-ray/">PyDev of the Week: Meg Ray</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}, 'content': [{'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<div class="pf-content"><p>This week we welcome Meg Ray (<a href="https://twitter.com/teach_python" rel="noopener noreferrer" target="_blank">@teach_python</a>) as our PyDev of the Week! Meg teaches programming to other teachers and has developed Python-related curriculum. Meg is also the author of <a href="https://www.odddot.com/codethisgame" rel="noopener noreferrer" target="_blank">Code This Game</a>, a book which will be coming out in August 2019. Let&#8217;s take some time to get to know her better!</p>\n<p><strong>Can you tell us a little about yourself (hobbies, education, etc): </strong></p>\n<p>I started out as an actor. I studied theater and moved to New York City to start out my career. One of the jobs I did to stay afloat while I was starting out was teaching theater classes to kids. I taught theater programs for students with disabilities as well as homeless youth. This lead me to my career as a special education teacher. I really enjoyed teaching and mentoring young people, particularly young people who have had challenges in their lives. </p>\n<p>Around this time in my life, I began to learn to program. I was having a lot of fun with it, and I also started to understand computer science education as an equity issue. I was hired at a school to teach a software engineering and game design class that was required for all 9th graders. I learned as I went. I re-designed the course to include Python in addition to block coding and to be more inclusive of students with learning differences. </p>\n<p>Now I develop curriculum and train other educators to teach computer science. Through the <a href="https://tech.cornell.edu/impact/k-12/" rel="noopener noreferrer" target="_blank">Cornell Tech Teacher in Residence initiative</a>, I have been providing in-classroom coaching and support to K-8 teachers. I’ve also been working on my first book! <a href="https://www.odddot.com/codethisgame" rel="noopener noreferrer" target="_blank">Code This Game!</a> is an intro to Python and computer science through designing a game. It was really fun to have the opportunity to apply everything I’ve learned about teaching Python to kids in a creative way. </p>\n<p>On a personal note, I’m a new mom. One of the priorities that I have now is building community. I DM for a D&#038;D (with babies!) campaign, and have been thinking about other ways to make space for family and community in my life. One thing that I love about Python is the Python community. For me that means participating in my local meetup, collaborating with others to support Python eductors, and attending Pycon as a family. <span id="more-8468"></span></p>\n<p><strong>Why did you start using Python? </strong></p>\n<p>My partner is a software engineer. He really wanted me to attend the NYC Python meetup with him in 2013. I was convinced it would be boring, but agreed to go one time. I wrote my first program that evening and had a great time! I started going with him every week and using the time to practice and learn. Then he convinced me to attend Pycon with him in 2014. I signed up for a tutorial with Software Carpentry while he participated in the sprints. The rest is history. He’s also learned a lot about education since then. It’s been amazing to have the opportunity to push each other’s thinking, have debates about how CS is taught, and work on projects together. </p>\n<p><strong>What other programming languages do you know and which is your favorite? </strong></p>\n<p>I know some Processing and JavaScript. Python will always be my favorite! </p>\n<p><strong>What projects are you working on now? </strong></p>\n<p>At Cornell Tech, I’m developing and piloting a program called Raspberry Pi &#8211; in &#8211; a &#8211; Box. We noticed that students at underserved public schools don’t have the same opportunities to participate in “physical computing” and digital making as their counterparts at private and independent schools. We wanted to find out if it’s possible to make the Raspberry Pi more accessible to middle schoolers. Some of the obstacles that we need to think about are teacher training, cost, hardware and networking set-up, curriculum, as well as fitting it into the school day. </p>\n<p>I’m also preparing a methods course that I’ll be teaching at NYU this fall. It’s an <a href="https://steinhardt.nyu.edu/teachlearn/computer_science/graduate" rel="noopener noreferrer" target="_blank">Introduction to Computer Science Education</a>. It’s a deep dive into teaching CS at the K12 level. It is unique in that it is open to anyone who wants to take it as a non-matriculated course, and it is designed for students with a CS/programming background who are interested in education and for in-service and pre-service educators who are interested in CS/programming. </p>\n<p><strong>Which Python libraries are your favorite (core or 3rd party)? </strong></p>\n<p>Definitely <a href="https://pypi.org/project/ppb/" rel="noopener noreferrer" target="_blank">ppb</a>, which is a new education focused game library, that I’m very excited about. I’m a bit biased because the maintainers, Piper Thunstrom and Jamie Bliss, are friends and colleagues of mine, and I will be contributing as an advisor. However, I am really excited about how easy this library makes game development in learning environments! </p>\n<p>I also think that there’s a lot of potential for NLKT (Natural Language Toolkit) in education. I’ve found it really fun to play around with and hope to find ways to use it for ELA (English Language Arts) and Social Studies &#8211; CS integration projects. </p>\n<p><strong>How did you become a speaker at tech conferences? </strong></p>\n<p>I had already started presenting my work on making CS education more accessible in education spaces. I submitted my first talk to PyGotham (the <a href="https://2019.pygotham.org/" rel="noopener noreferrer" target="_blank">New York City Python conference</a>) with a colleague who is a technologist. We gave a 30 minute joint talk. If I could re-write and re-present the talk I would, but instead I’ve just iterated from there. Every time I submit a talk or prepare for a talk, I have that little voice in my head telling me that I’m not qualified enough, not interesting enough, not enough. But I label it as imposter syndrome and keep going. </p>\n<p><strong>Do you have any advice for other aspiring speakers? </strong></p>\n<p>Think about what you are passionate about and what you have to say. Then think about the audience and frame it in a way that is useful and interesting to them. Don’t wait for your doubts or insecurities to go away. Let them chatter away, while you share your knowledge with others. </p>\n<p>If you want to build your skills, start small. Look for opportunities to speak at a meetup, to co-present, and to give lightning talks. Then move on to submitting talks to regional conferences and then national/global conferences. If a talk doesn’t go as well as you hoped, it doesn’t mean you’re a bad speaker. It means you’re still developing. Reflect and iterate on it. Each talk is a learning experience that makes you a better speaker next time. </p>\n<p><strong>Thanks for doing the interview, Meg!</strong></p>\n</div><p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F15%2Fpydev-of-the-week-meg-ray%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20Meg%20Ray" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F15%2Fpydev-of-the-week-meg-ray%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20Meg%20Ray" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F15%2Fpydev-of-the-week-meg-ray%2F&#038;title=PyDev%20of%20the%20Week%3A%20Meg%20Ray" data-a2a-url="http://www.blog.pythonlibrary.org/2019/07/15/pydev-of-the-week-meg-ray/" data-a2a-title="PyDev of the Week: Meg Ray"></a></p><p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/15/pydev-of-the-week-meg-ray/">PyDev of the Week: Meg Ray</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}], 'wfw_commentrss': 'http://www.blog.pythonlibrary.org/2019/07/15/pydev-of-the-week-meg-ray/feed/', 'slash_comments': '4'}, {'title': 'PyDev of the Week: David Kopec', 'title_detail': {'type': 'text/plain', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': 'PyDev of the Week: David Kopec'}, 'links': [{'rel': 'alternate', 'type': 'text/html', 'href': 'http://www.blog.pythonlibrary.org/2019/07/08/pydev-of-the-week-david-kopec/'}], 'link': 'http://www.blog.pythonlibrary.org/2019/07/08/pydev-of-the-week-david-kopec/', 'comments': 'http://www.blog.pythonlibrary.org/2019/07/08/pydev-of-the-week-david-kopec/#comments', 'published': 'Mon, 08 Jul 2019 05:05:52 +0000', 'published_parsed': time.struct_time(tm_year=2019, tm_mon=7, tm_mday=8, tm_hour=5, tm_min=5, tm_sec=52, tm_wday=0, tm_yday=189, tm_isdst=0), 'authors': [{'name': 'Mike'}], 'author': 'Mike', 'author_detail': {'name': 'Mike'}, 'tags': [{'term': 'Books', 'scheme': None, 'label': None}, {'term': 'PyDevOfTheWeek', 'scheme': None, 'label': None}, {'term': 'Python', 'scheme': None, 'label': None}], 'id': 'http://www.blog.pythonlibrary.org/?p=8440', 'guidislink': False, 'summary': '<p>This week we welcome David Kopec (@davekopec) as our PyDev of the Week! David is the author of Classic Computer Science Problems in Python from Manning, as well as several other books. He was even interviewed about his book by Talk Python! If you would like to see what open source projects he is working &#8230; <a href="http://www.blog.pythonlibrary.org/2019/07/08/pydev-of-the-week-david-kopec/" class="more-link">Continue reading <span class="screen-reader-text">PyDev of the Week: David Kopec</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/08/pydev-of-the-week-david-kopec/">PyDev of the Week: David Kopec</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>', 'summary_detail': {'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<p>This week we welcome David Kopec (@davekopec) as our PyDev of the Week! David is the author of Classic Computer Science Problems in Python from Manning, as well as several other books. He was even interviewed about his book by Talk Python! If you would like to see what open source projects he is working &#8230; <a href="http://www.blog.pythonlibrary.org/2019/07/08/pydev-of-the-week-david-kopec/" class="more-link">Continue reading <span class="screen-reader-text">PyDev of the Week: David Kopec</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/08/pydev-of-the-week-david-kopec/">PyDev of the Week: David Kopec</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}, 'content': [{'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<div class="pf-content"><p>This week we welcome David Kopec (<a href="https://twitter.com/davekopec" rel="noopener noreferrer" target="_blank">@davekopec</a>) as our PyDev of the Week! David is the author of <a href="https://www.manning.com/books/classic-computer-science-problems-in-python" rel="noopener noreferrer" target="_blank">Classic Computer Science Problems in Python</a> from Manning, as well as several other books. He was even interviewed about his book by <a href="https://talkpython.fm/episodes/show/211/classic-cs-problems-in-python" rel="noopener noreferrer" target="_blank">Talk Python</a>! If you would like to see what open source projects he is working on, then you should head on over to <a href="https://github.com/davecom" rel="noopener noreferrer" target="_blank">Github</a>. Now let&#8217;s take some time to get to know David!</p>\n<p><strong>Can you tell us a little about yourself (hobbies, education, etc)?</strong></p>\n<p>Before I start, I want to thank Mike for including me in this series. It’s an honor.</p>\n<p>I’m an <a href="https://www.champlain.edu/academics/our-faculty/kopec-david" rel="noopener noreferrer" target="_blank">assistant professor</a> in the <a href="https://www.champlain.edu/technology-degrees/computer-science-and-innovation" rel="noopener noreferrer" target="_blank">Computer Science &#038; Innovation</a> program at <a href="https://www.champlain.edu/" rel="noopener noreferrer" target="_blank">Champlain College</a> in beautiful Burlington, Vermont, USA. Before becoming a full time professor, I worked professionally as a software developer, and I’m still open to taking projects on a <a href="https://www.oaksnow.com/" rel="noopener noreferrer" target="_blank">consulting basis</a>. I have a bachelors degree in economics (minor in English) from Dartmouth College and a masters degree in computer science, also from Dartmouth.</p>\n<p>I’m the author of three programming books: <a href="https://amzn.to/2HhTjpQ" rel="noopener noreferrer" target="_blank">Dart for Absolute Beginners</a> (Apress, 2014), <a href="https://www.manning.com/books/classic-computer-science-problems-in-swift" rel="noopener noreferrer" target="_blank">Classic Computer Science Problems in Swift</a> (Manning, 2018), and <a href="https://www.manning.com/books/classic-computer-science-problems-in-python" rel="noopener noreferrer" target="_blank">Classic Computer Science Problems in Python</a> (Manning, 2019). However, I no longer recommend the Dart book because it’s very outdated. I’m also an <a href="https://github.com/davecom" rel="noopener noreferrer" target="_blank">active contributor</a> to open source.</p>\n<p>When I’m not working, I enjoy learning about American history, entrepreneurship, and keeping up with the world of computing (although that’s kind of my job too). I also have all the same hobbies that just about everyone has—cooking, traveling, film, reading (classics, biography, history, business dramas), television (Frasier &#038; The Curse of Oak Island!), music, video games (Zelda &#038; AOE2!), podcasts, stock trading, etc.<span id="more-8440"></span></p>\n<p><strong>Why did you start using Python? </strong></p>\n<p>When I started graduate school at Dartmouth about a decade ago, I realized that many of my classes were in Python, so I thought: “I better get good at this language!&#8221; I really liked the language from the beginning, because of its succinctness and rich standard library. I appreciate how Python often closely resembles the pseudo-code you find in a textbook or you write on the board, but it’s not pseudo-code, it’s real-code.</p>\n<p>I’ve used Python on-and-off for web development projects, and we teach several of our computer science courses at Champlain in Python.</p>\n<p><strong>What other programming languages do you know and which is your favorite? </strong></p>\n<p>It’s a long list because I started programming when I was eight years old and basically never stopped. Here are the languages I’ve actually used on non-trivial projects in the approximate chronological order of when I learned them: BASIC, Visual Basic, Java, C, Objective-C, PHP, JavaScript, Python, Ruby, Dart, and Swift. I’ve also learned in school, or learned in order to teach them: Scheme, Haskell, Assembly, and Go. And I’ve dabbled in Perl, C++, and Clojure.</p>\n<p>It’s a fairly long list—I know. I guess I’m a bit of a language optimist, because the one I like best is often the one I’m really deep into using on a project. Well, if you asked me five years ago about my favorite, I would probably say Objective-C. However, today I don’t really have a favorite. My go-to languages right now are Swift for building Mac &#038; iOS apps, Python for web or scripting work, and C for some of my hobby projects.</p>\n<p>I know what I don’t like, though. And that’s C++. I begrudgingly started to learn some of the recent changes in C++ 11, 14, and 17 last week. And while they generally make the language a bit better, they also make the thing I dislike most about C++ worse—its size. It’s just such a big language with so many features that it’s hard to wrap your head around it when you’re not using it every day. I’ve heard it said that even people who write C++ professionally usually only use a subset of the language. I hope to never have the misfortune of writing C++ professionally, so hopefully I will never have to find out. All kidding aside though, it’s not my favorite language. But based on my prior history, maybe I’d start to like it more if I just wrote more of it!</p>\n<p>One recent worry I’ve had is that perhaps I’m context switching languages too much. In my work, it’s not unusual for me to be answering student questions in Go, Swift, and Python during the day and then coming home and doing some of my own projects in C. The worry is that I’m no longer spending enough time in a single language to be fully realizing the benefits of mastery. Instead I’m trying to remember how to do something differently in one language than in another.</p>\n<p><strong>What projects are you working on now? </strong></p>\n<p>In my professional work, I have at least two projects over the summer. One is to translate the Android Development course I’ve been teaching the last three years from Java to Kotlin. Another is to revamp bits of a course I teach called Intro to Mobile &#038; Web Development so that it has unit tests for many of the assignments. So, I’ll be learning yet another language—Kotlin.</p>\n<p>In my open source work, me and my collaborator, Ferran, recently updated our graph data structure library, <a href="https://github.com/davecom/SwiftGraph" rel="noopener noreferrer" target="_blank">SwiftGraph</a>, to version 3.0 with new features and support for Swift 5.</p>\n<p>In my writing work. I’m spending some time promoting Classic Computer Science Problems in Python, which came out just a couple months ago. I’m also considering whether/when to start writing the next book in the <a href="https://classicproblems.com/" rel="noopener noreferrer" target="_blank">Classic Computer Science Problems</a> series. We’re considering either Java or Go for the next language in the series. I started writing a scifi novel, but I’m only 15 pages into it.</p>\n<p>In my hobby development work, I should really update my Mac app for teaching young people programming in a Logo/BASIC like language, <a href="https://www.oaksnow.com/seaturtle/" rel="noopener noreferrer" target="_blank">SeaTurtle</a>, with some more tutorials and bug fixes. I’d love to publish a game too. I build prototypes sometimes, but I haven’t had an idea that I feel is so strong (and that I’m capable of doing myself to the end) that I’ve pursued it.</p>\n<p><strong>Which Python libraries are your favorite (core or 3rd party)? </strong></p>\n<p>As I mentioned before, I like a lot of the standard library. functools, collections, and json are some I use particularly often. But, I also love just how much first-party miscellaneous useful stuff there is. Everything from command-line parsing (argparse), to database mangling (sqlite3), to email handling (email), and even compression (zlib) is in there. I find that super handy. As far as third-party packages go, I’m a fan of Requests, Beautiful Soup, and scikit-learn.</p>\n<p><strong>How did you become an author?</strong> </p>\n<p>All three of my books came about because I wrote proposals and pitched them to publishers. The first one, Dart for Absolute Beginners, happened because I was excited about the Dart language in 2012 when it was still in beta, and I thought—“gee, maybe my niche could be to write the first beginners book in this language for when it takes off.&#8221; Unfortunately, the language never did take off. Perhaps it is now “taking off” as a result of Flutter, but now that book is woefully outdated. I really liked the language, and I think Dart for Absolute Beginners was a great book. However, while it was well received by readers and reviewers, it never had a large amount of sales due to the total Dart market being quite small.</p>\n<p>What it did do for me is establish credibility and launch me into the computer science education space. It helped me get jobs (including my current one), and it gave me the track record to get a book deal for my next book, Classic Computer Science Problems in Swift. That book, again, was positioned to target a niche. There were plenty of Swift books in 2016/2017 when I wrote it, but they were all about iOS development. My book was going to get on the wave of this up-and-coming language but fill the hole of CS education in this language. And I think it did that pretty well.</p>\n<p>But, frankly, what I’ve learned with the early success of Classic Computer Science Problems in Python, is that (for sales success at least) it’s better to write a good niche book in a popular language, where there might be competitors, than write a good niche book in a fairly niche language. You don’t want to be a niche within a niche. That’s why choosing the language of the next book in the series is so hard. <a href="https://twitter.com/davekopec/status/1081405115783933954" rel="noopener noreferrer" target="_blank">We ran a poll of Manning readers</a> to see what language they would like next. Go and Java practically tied. Java is the Jupiter-sized language community that in many ways makes sense in the same way that Python made sense, but it seems like it’s past its prime. Go is still growing rapidly. But if Go is still not really as popular as Swift (which by many metrics it doesn’t appear to be)—then maybe Java still makes more sense right now. Originally I wanted to do Go and the publisher wanted to do Java. But now, I’m leaning towards Java too. And there is new stuff in the Java world—Java 9, 10, 11, and 12 have a few interesting new features.</p>\n<p><strong>What were some of the hardest things about writing your book? </strong></p>\n<p>One of the hardest things to deal with as an author or professor is that you are not a celebrity but you are still a public figure in the sense that people publicly review your work. Whether that be course reviews or book reviews. And many of those reviews will be accurate, and some of those reviews will be inaccurate. It’s often the people that hate or love your work most that will take the time to write a review. One weird thing is that <strong>Classic Computer Science Problems in Python</strong> has many good reviews on Twitter, on <a href="http://manning.com/" rel="noopener noreferrer" target="_blank">Manning.com</a>, amongst official reviewers, but so far no Amazon reviews (at the time I’m writing this) despite being the best selling of my three books. That might be because it just came out two months ago. And I don’t want to get fake reviews. So many niche technical books have positive fake reviews, usually put there by the publisher. So, here’s a call to action for people reading this blog. If you read CCSPiP from cover to cover (or nearly so), then please leave a review on Amazon. Especially if you liked it <img src="https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n<p><strong>Do you have any advice for others who would like to write about programming? </strong></p>\n<p>People don’t write technical books for the money. Even a good technical book doesn’t usually sell more than a couple thousand copies. Write a technical book because: you think you’re a good writer, you think you can communicate the subject well, and/or you want the career advancement that comes with being a published author. Career advancement and glory are usually the main rewards. One other piece of advice: keep it pithy. Way too many technical (and non-technical) books are needlessly long. Publishers pressure you into writing as many pages as possible because they think that means they can charge more. Push back on that. Short and sweet is better than long and boring.</p>\n<p><strong>Thanks for doing the interview, David!</strong></p>\n</div><p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F08%2Fpydev-of-the-week-david-kopec%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20David%20Kopec" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F08%2Fpydev-of-the-week-david-kopec%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20David%20Kopec" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F08%2Fpydev-of-the-week-david-kopec%2F&#038;title=PyDev%20of%20the%20Week%3A%20David%20Kopec" data-a2a-url="http://www.blog.pythonlibrary.org/2019/07/08/pydev-of-the-week-david-kopec/" data-a2a-title="PyDev of the Week: David Kopec"></a></p><p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/08/pydev-of-the-week-david-kopec/">PyDev of the Week: David Kopec</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}], 'wfw_commentrss': 'http://www.blog.pythonlibrary.org/2019/07/08/pydev-of-the-week-david-kopec/feed/', 'slash_comments': '2'}, {'title': 'PyDev of the Week:  Scott Shawcroft', 'title_detail': {'type': 'text/plain', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': 'PyDev of the Week:  Scott Shawcroft'}, 'links': [{'rel': 'alternate', 'type': 'text/html', 'href': 'http://www.blog.pythonlibrary.org/2019/07/01/pydev-of-the-week-scott-shawcroft/'}], 'link': 'http://www.blog.pythonlibrary.org/2019/07/01/pydev-of-the-week-scott-shawcroft/', 'comments': 'http://www.blog.pythonlibrary.org/2019/07/01/pydev-of-the-week-scott-shawcroft/#comments', 'published': 'Mon, 01 Jul 2019 05:05:23 +0000', 'published_parsed': time.struct_time(tm_year=2019, tm_mon=7, tm_mday=1, tm_hour=5, tm_min=5, tm_sec=23, tm_wday=0, tm_yday=182, tm_isdst=0), 'authors': [{'name': 'Mike'}], 'author': 'Mike', 'author_detail': {'name': 'Mike'}, 'tags': [{'term': 'PyDevOfTheWeek', 'scheme': None, 'label': None}, {'term': 'Python', 'scheme': None, 'label': None}], 'id': 'http://www.blog.pythonlibrary.org/?p=8420', 'guidislink': False, 'summary': '<p>This week we welcome Scott Shawcroft (@tannewt) as our PyDev of the Week! Scott is the lead developer of CircuitPython, a variant of the Python programming language made for microcontrollers. If you&#8217;d like to see what else Scott is up to, his website is a good place to start. Let&#8217;s take a few moments to &#8230; <a href="http://www.blog.pythonlibrary.org/2019/07/01/pydev-of-the-week-scott-shawcroft/" class="more-link">Continue reading <span class="screen-reader-text">PyDev of the Week:  Scott Shawcroft</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/01/pydev-of-the-week-scott-shawcroft/">PyDev of the Week:  Scott Shawcroft</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>', 'summary_detail': {'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<p>This week we welcome Scott Shawcroft (@tannewt) as our PyDev of the Week! Scott is the lead developer of CircuitPython, a variant of the Python programming language made for microcontrollers. If you&#8217;d like to see what else Scott is up to, his website is a good place to start. Let&#8217;s take a few moments to &#8230; <a href="http://www.blog.pythonlibrary.org/2019/07/01/pydev-of-the-week-scott-shawcroft/" class="more-link">Continue reading <span class="screen-reader-text">PyDev of the Week:  Scott Shawcroft</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/01/pydev-of-the-week-scott-shawcroft/">PyDev of the Week:  Scott Shawcroft</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}, 'content': [{'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<div class="pf-content"><p>This week we welcome Scott Shawcroft (<a href="https://twitter.com/tannewt" rel="noopener noreferrer" target="_blank">@tannewt</a>) as our PyDev of the Week! Scott is the lead developer of <a href="https://learn.adafruit.com/welcome-to-circuitpython/what-is-circuitpython" rel="noopener noreferrer" target="_blank">CircuitPython</a>, a variant of the Python programming language made for microcontrollers. If you&#8217;d like to see what else Scott is up to, his <a href="http://tannewt.org/" rel="noopener noreferrer" target="_blank">website</a> is a good place to start. Let&#8217;s take a few moments to get to know Scott better!</p>\n<p><strong>Can you tell us a little about yourself (hobbies, education, etc):</strong></p>\n<p>I’m Scott, I graduated from the University of Washington in 2009 in Computer Engineering. Afterwards, I joined the Maps team at Google where I worked on rendering and styling of the map. I left in 2015 to do my own thing. I designed a modular flight controller system for racing quadcopters and learned about hardware at the same time. My hobbies include running, rock climbing, video gaming and thrift shopping for retro electronics (so I can put CircuitPython in them.)<span id="more-8420"></span></p>\n<p><strong>Why did you start using Python?</strong></p>\n<p>I started using Python to make my first desktop application (<a href="http://denu.sourceforge.net/" rel="noopener noreferrer" target="_blank">Denu</a>) back in 2004 or so. I first learned programming with PHP and websites. I wanted to move to programming the desktop and remember standing in a bookstore deciding between Perl and Python books. I picked Python for some reason and have never looked back.</p>\n<p><strong>What other programming languages do you know and which is your favorite?</strong></p>\n<p>As I said, I learned PHP first after wanting dynamic HTML. (This is before CSS and Javascript were really a thing.) I haven’t really touched PHP since then.</p>\n<p>In school we did mostly Java with a small sampling of other languages. While I TAed the intro computer programming course I taught an optional section that taught the course in Python too. After buying a new MacBook Pro, I reverse engineered the Apple multitouch pad using Python and implemented <a href="https://sourceforge.net/projects/touchd/" rel="noopener noreferrer" target="_blank">a daemon</a> for it in C in 2008. (It’s my Linux kernel <a href="https://github.com/torvalds/linux/blob/6f0d349d922ba44e4348a17a78ea51b7135965b1/drivers/input/mouse/bcm5974.c#L7" rel="noopener noreferrer" target="_blank">claim to fame</a>.)</p>\n<p>I did Javascript at Google for an internship on GMail. Once I started full time at Google, I did C++ on servers. For my embedded work I primarily do C (even in CircuitPython).</p>\n<p>It’s a bit tough to pick a favorite. Python is always a great start for scripting, prototyping and teaching. The newest versions of C and C++ are also really nice when you want to manage your own memory.</p>\n<p><strong>What projects are you working on now?</strong></p>\n<p>My core project is CircuitPython. It is a reimplementation of Python with the goal of making it easy to get started programming and building something. It is based on MicroPython which laid the foundation for the refinements we’ve done in CircuitPython. My day-to-day job is to expand and refine the underlying C code of CircuitPython.</p>\n<p>I design and hack hardware to get CircuitPython running on new devices in my spare time. For example, I’ve designed a GameBoy cart that runs CircuitPython to make it easier to program a GameBoy. I also have a toaster oven and piano keyboard waiting for a CircuitPython brain. Previously, I’ve made a custom mechanical computer keyboard with CircuitPython. I like hacking devices to have CircuitPython because it is simply the easiest way to hack on code.</p>\n<p><strong>Which Python libraries are your favorite (core or 3rd party)?</strong></p>\n<p>Struct is probably my favorite when using hardware. It is immensely useful for interfacing with external sensors.</p>\n<p>My favorite third party library is requests because it makes scripting REST APIs like GitHub’s easy.</p>\n<p><strong>How did you become the lead developer for CircuitPython?</strong></p>\n<p>To some degree it was happenstance. I discovered Adafruit while making sensors for my house. While making my flight controllers a few years later I became a regular on Adafruit’s Show and Tell. Once it was clear that my hardware business was not sustainable I started looking for a software gig. I asked Adafruit if they had anything and they offered to pay me to port MicroPython to their M0 boards (which became CircuitPython). It went really well and I continued to work on it.</p>\n<p>So, I became lead by being first to some degree. As the project has grown I’ve set the vision for the project and on boarded a number of others. We’ll see how CircuitPython evolves as it continues to grow.</p>\n<p><strong>What excites you about the future of CircuitPython?</strong></p>\n<p>I’m excited to see all of the different things people make with it. CircuitPython combines the ease of Python with the tangibility of hardware in a way that hasn’t been done before.</p>\n<p>As we broaden our device support, we’ll see a wider variety of projects built with CircuitPython. When we add mobile workflow support, we’ll see our audience broaden to include those who primarily use a mobile device instead of a laptop or desktop.</p>\n<p><strong>Can you describe some of the challenges for making Python work on embedded systems?</strong></p>\n<p>The biggest challenge to making Python on embedded systems is limited RAM. As a project grows to using many libraries, the ram footprint grows as well. Once the RAM is full or fragmented, the code cannot continue. Luckily, the inexpensive microcontroller space is still very much in Moore’s Law territory. The original microcontroller I ported MicroPython to, the SAMD21, has 32 kilobytes of ram. Our newest, the SAMD51, has between 192 kilobytes and 256 kilobytes. Plenty of space. <img src="https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n<p><strong>Is there anything else you’d like to say?</strong></p>\n<p>I’d like to encourage software folks to try building something with hardware. It’s incredibly fun to hold and interact with a physical thing you’ve programmed.</p>\n<p>Microcontroller programming brings a whole new meaning to “full stack”. Code running on a microcontroller is much closer to “the metal” by skipping the many layers a full OS like Windows or Linux includes. Without those layers, it’s easier to appreciate the machinery of a CPU and memory because it’s just your code running.</p>\n<p><strong>Thanks for doing the interview, Scott!</strong></p>\n</div><p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F01%2Fpydev-of-the-week-scott-shawcroft%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20%20Scott%20Shawcroft" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F01%2Fpydev-of-the-week-scott-shawcroft%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20%20Scott%20Shawcroft" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F07%2F01%2Fpydev-of-the-week-scott-shawcroft%2F&#038;title=PyDev%20of%20the%20Week%3A%20%20Scott%20Shawcroft" data-a2a-url="http://www.blog.pythonlibrary.org/2019/07/01/pydev-of-the-week-scott-shawcroft/" data-a2a-title="PyDev of the Week:  Scott Shawcroft"></a></p><p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/07/01/pydev-of-the-week-scott-shawcroft/">PyDev of the Week:  Scott Shawcroft</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}], 'wfw_commentrss': 'http://www.blog.pythonlibrary.org/2019/07/01/pydev-of-the-week-scott-shawcroft/feed/', 'slash_comments': '5'}, {'title': 'PyDev of the Week: Geir Arne Hjelle', 'title_detail': {'type': 'text/plain', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': 'PyDev of the Week: Geir Arne Hjelle'}, 'links': [{'rel': 'alternate', 'type': 'text/html', 'href': 'http://www.blog.pythonlibrary.org/2019/06/24/pydev-of-the-week-geir-arne-hjelle/'}], 'link': 'http://www.blog.pythonlibrary.org/2019/06/24/pydev-of-the-week-geir-arne-hjelle/', 'comments': 'http://www.blog.pythonlibrary.org/2019/06/24/pydev-of-the-week-geir-arne-hjelle/#comments', 'published': 'Mon, 24 Jun 2019 05:05:49 +0000', 'published_parsed': time.struct_time(tm_year=2019, tm_mon=6, tm_mday=24, tm_hour=5, tm_min=5, tm_sec=49, tm_wday=0, tm_yday=175, tm_isdst=0), 'authors': [{'name': 'Mike'}], 'author': 'Mike', 'author_detail': {'name': 'Mike'}, 'tags': [{'term': 'PyDevOfTheWeek', 'scheme': None, 'label': None}, {'term': 'Python', 'scheme': None, 'label': None}], 'id': 'http://www.blog.pythonlibrary.org/?p=8348', 'guidislink': False, 'summary': '<p>This week we welcome Geir Arne Hjelle (@gahjelle) as our PyDev of the Week! Geir is a regular contributor to Real Python. You can also find some of his work over on Github. Let&#8217;s take a few moments to get to know Geir now! Can you tell us a little about yourself (hobbies, education, etc): &#8230; <a href="http://www.blog.pythonlibrary.org/2019/06/24/pydev-of-the-week-geir-arne-hjelle/" class="more-link">Continue reading <span class="screen-reader-text">PyDev of the Week: Geir Arne Hjelle</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/24/pydev-of-the-week-geir-arne-hjelle/">PyDev of the Week: Geir Arne Hjelle</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>', 'summary_detail': {'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<p>This week we welcome Geir Arne Hjelle (@gahjelle) as our PyDev of the Week! Geir is a regular contributor to Real Python. You can also find some of his work over on Github. Let&#8217;s take a few moments to get to know Geir now! Can you tell us a little about yourself (hobbies, education, etc): &#8230; <a href="http://www.blog.pythonlibrary.org/2019/06/24/pydev-of-the-week-geir-arne-hjelle/" class="more-link">Continue reading <span class="screen-reader-text">PyDev of the Week: Geir Arne Hjelle</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/24/pydev-of-the-week-geir-arne-hjelle/">PyDev of the Week: Geir Arne Hjelle</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}, 'content': [{'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<div class="pf-content"><p>This week we welcome Geir Arne Hjelle (<a href="http://@gahjelle" rel="noopener noreferrer" target="_blank">@gahjelle</a>) as our PyDev of the Week! Geir is a regular contributor to <a href="https://realpython.com/team/gahjelle/" rel="noopener noreferrer" target="_blank">Real Python</a>. You can also find some of his work over on <a href="https://github.com/gahjelle/" rel="noopener noreferrer" target="_blank">Github</a>. Let&#8217;s take a few moments to get to know Geir now!</p>\n<p><img src="https://www.blog.pythonlibrary.org/wp-content/uploads/2019/04/geir_arne_hjelle-225x300.jpg" alt="" width="225" height="300" class="aligncenter size-medium wp-image-8361" srcset="http://www.blog.pythonlibrary.org/wp-content/uploads/2019/04/geir_arne_hjelle-225x300.jpg 225w, http://www.blog.pythonlibrary.org/wp-content/uploads/2019/04/geir_arne_hjelle-768x1024.jpg 768w" sizes="(max-width: 225px) 100vw, 225px" /></p>\n<p><strong>Can you tell us a little about yourself (hobbies, education, etc):</strong></p>\n<p>Sure. I grew up in a beautiful village on an island in the north of Norway. My family has since moved south, but I still go north and visit friends and enjoy the nature regularly. I&#8217;ve always enjoyed playing with numbers, so I quite naturally ended up studying mathematics at the University. I did both a Master&#8217;s and a PhD at the Norwegian University of Science and Technology in Trondheim. During the PhD, I also got to spend about a year in my favorite big city: Barcelona. To this day, I spend a week or two in Barcelona every year.</p>\n<p>After my studies, I lived three years in St. Louis, Missouri doing a Post.Doc at Washington University. Then I moved back to Norway, and I&#8217;m currently living in Oslo working with data science, mostly using Python.</p>\n<p>I spend a fair bit of my free time with programming as well. I write tutorials for <a href="https://realpython.com" rel="noopener noreferrer" target="_blank">Real Python</a> and helping <a href="https://kidsakoder.no" rel="noopener noreferrer" target="_blank">teach kids how to code</a>. I enjoy being outdoors. In Norway there are great opportunities for going skiing in the winter, and hiking in the summer. At this very moment, I&#8217;m actually basking in the sun in a hammock in the forest just outside of Oslo. Finally, I should note that I love getting together with friends for a board game session.<span id="more-8348"></span></p>\n<p><strong>Why did you start using Python?</strong></p>\n<p>Interestingly, it actually took me quite a while to get warmed up to Python. I have done some kind of coding almost my entire life. I got started with BASIC on the Commodore 64 back in the 80&#8217;s, where I think one of my proudest achievements was figuring out that <code>GOTO</code> was evil. I also remember hacking one of my games with the magic line <code>IF PLAYER=&quot;Geir Arne&quot; THEN SCORE=SCORE+100</code>, which in a small way exemplified the power of knowing some basic programming (and the responsibilities that come along).</p>\n<p>My first encounter with Python was at a summer internship, where I was working alongside someone who was quite involved with Python at the time. This was Python 1.6, and it already seemed quite powerful. At the time I was dealing with Java, C, and C++, and ironically the simplicity of Python confused me. How did it work without a `main()` method? And what really happens at imports? In the end, I went back to my braceful code.</p>\n<p>I finally picked up Python again around 2012. At the time I was working with Matlab as a modeling tool. Matlab is great for doing what Matlab is great at, but I also started to feel some of its limitations. At an internal hackathon, a colleague and I wanted to create a tool to automate the generation of some reports, and we decided to try Python for the project. This time it clicked much better. I was really impressed by how easily and fast we could create the tool. At the next hackathon, we did a proof-of-concept showing how to integrate Python into the Matlab model pipeline. While we got some support from the higher-ups, this unfortunately ended at the PoC stage.</p>\n<p>As a kind of New Year&#8217;s resolution for 2014 I challenged myself to learn Python more properly. Luckily, several things came together that year. I started a new job where I could use Python as my main language. I was also able to attend a few conferences, and got to learn more about both the community and the eco-system surrounding Python. The more I&#8217;ve learned, the more impressed I&#8217;ve become with the language design. The core of the language is quite simple and consistent, while being very flexible. At the same time, the supporting tools and packages have really matured the last couple of years. I see a big improvement, just in the relatively few years I&#8217;ve been using Python.</p>\n<p><strong>What other programming languages do you know and which is your favorite?</strong></p>\n<p>At this point Python is clearly my favorite, and the language I reach for when I need to be productive. However, there are some other languages that I have very fond memories of. During my studies, I first started using Linux and came across Awk. I picked up O&#8217;Reilly&#8217;s classic Sed &#038; Awk book&#8212;mainly because of the weird animals on the cover&#8212;and became an instant fan. Awk worked very seamlessly with the whole Unix philosophy of piping small specialized tools together. In the end, I used Awk to create several small tools, including a small language for creating fractals that I used for my Master&#8217;s thesis.</p>\n<p>I&#8217;m also very impressed with <a href="https://scratch.mit.edu/" rel="noopener noreferrer" target="_blank">Scratch</a>. While it may have the appearance of a toy language, it supports all the &#8220;serious&#8221; programming concepts. I&#8217;ve been involved in teaching programming to kids for some years now, and Scratch is an amazing platform for this. The kids are usually up and coding on their own within 5 minutes of opening the web page. Within one hour they have created their very own game. I have actually done a few semi-serious projects with Scratch as well. However, the main limitation I find is that proper data structures are not really well supported (and I still do prefer the keyboard for coding).</p>\n<p>Finally, I hope to one day have the time to learn a pure functional language more properly. I guess the philosophy really intrigues the mathematical part of my brain. There is a fun project called <a href="http://coconut-lang.org" rel="noopener noreferrer" target="_blank">Coconut</a>, which adds functional programming syntax right on top of Python. Another platform I hope to have time learn more about at some time is <a href="https://www.erlang.org" rel="noopener noreferrer" target="_blank">Erlang</a> and its modern cousin, <a href="https://elixir-lang.org" rel="noopener noreferrer" target="_blank">Elixir</a>. The scalability and concurrency features look really great.</p>\n<p><strong>What projects are you working on now?</strong></p>\n<p>I recently started working at a data science and machine learning consultancy. There I&#8217;m involved in a few different projects, ranging from building models for customer analytics to modeling soccer kicks based on video. Previously, I worked with the Norwegian Mapping Authority, where we were <a href="https://kartverket.github.io/where/" rel="noopener noreferrer" target="_blank">building a tool</a> to help monitor how the Earth is tumbling through space. I really enjoy projects where I get to combine programming and modeling in interesting and useful ways.</p>\n<p>Outside of my regular work, I&#8217;m doing the final touches on a couple of articles I&#8217;m writing for Real Python: one about how imports work (answering all my own questions from back in the day), and one comparing classes, context managers, and decorators. I was lucky enough to go to PyCon US this year, where I <a href="https://pyvideo.org/pycon-us-2019/plugins-adding-flexibility-to-your-apps.html" rel="noopener noreferrer" target="_blank">gave a presentation</a> about keeping code modular using a kind of plug-ins. I&#8217;m polishing up the documentation and some of the code of my <a href="https://pypi.org/project/pyplugs/" rel="noopener noreferrer" target="_blank">pyplugs</a> package that provides these plug-ins.</p>\n<p><strong>Which Python libraries are your favorite (core or 3rd party)?</strong></p>\n<p>I&#8217;m very grateful to all the effort that been put into the Python data science stack over the years, and most of what I do does in some way involve <a href="https://www.numpy.org" rel="noopener noreferrer" target="_blank">numpy</a>. This amazing library has really been at the center of Python becoming the go-to language for data science.</p>\n<p>Let me also mention another less known library: <a href="https://pint.readthedocs.io/" rel="noopener noreferrer" target="_blank">pint</a> is a package for handling units and physical quantities. It wraps around <code>numpy</code> so that you can add units to your arrays, or you can use it to do simple unit conversions directly. Did you know that 1 apothecary dram is about 0.14 ounces?</p>\n<pre class="python"><span style="color: #66cc66;">&gt;&gt;&gt;</span> <span style="color: #ff7700;font-weight:bold;">import</span> pint\n<span style="color: #66cc66;">&gt;&gt;&gt;</span> u = pint.<span style="color: black;">UnitRegistry</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>\n&nbsp;\n<span style="color: #66cc66;">&gt;&gt;&gt;</span> ad = <span style="color: #ff4500;">1</span> <span style="color: #66cc66;">*</span> u.<span style="color: black;">apothecary_dram</span>\n<span style="color: #66cc66;">&gt;&gt;&gt;</span> ad.<span style="color: black;">to</span><span style="color: black;">&#40;</span><span style="color: #483d8b;">&quot;ounces&quot;</span><span style="color: black;">&#41;</span>\n<span style="color: #66cc66;">&lt;</span>Quantity<span style="color: black;">&#40;</span><span style="color: #ff4500;">0.13714285714285715</span>, <span style="color: #483d8b;">\'ounce\'</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">&gt;</span></pre>\n<p><strong>How did you get started with Real Python?</strong></p>\n<p>At some point I came across <a href="https://dbader.org" rel="noopener noreferrer" target="_blank">Dan Bader&#8217;s personal blog</a>, and really enjoyed his articles and insights. Then, early 2018 I heard Dan on the <a href="https://pythonbytes.fm/episodes/show/62/wooey-and-gooey-are-simple-python-guis" rel="noopener noreferrer" target="_blank">Python Bytes podcast</a> talking about how he was taking over the Real Python website and that he was looking for contributors to help him write tutorials. I felt that it would be fun to challenge myself a little again, and at the same time maybe get to know more people in the Python community, so I reached out to Dan.</p>\n<p>It&#8217;s been a fantastic experience working with the whole Real Python team. I didn&#8217;t have a lot of experience writing from before: I&#8217;d done some scientific writing, and I had worked on some teaching materials for kids wanting to learn to program. However, with support from the rest of the team, and especially <a href="https://realpython.com/team/jjablonski" rel="noopener noreferrer" target="_blank">our editor, Joanna</a>, I feel much more confident in my writing now. Additionally, I&#8217;ve learned tons from my colleagues and from readers reaching out with questions and insights about our articles.</p>\n<p>We were lucky enough to join JetBrains at their <a href="https://blog.jetbrains.com/pycharm/2019/04/content-creators-at-the-pycharm-pycon-booth/" rel="noopener noreferrer" target="_blank">content creators booth</a> at PyCon in Cleveland this May. It was great to finally meet many of my Real Python colleagues, that I until then only knew through Slack and their articles and reviews. Additionally, several readers stopped by to chat. I must admit that I&#8217;m still very humbled by other people reading the stuff I write, and even finding it useful.</p>\n<p><strong>I see you volunteer to teach kids coding. What have you learned while doing that?</strong></p>\n<p>Back in 2013, some volunteers got together and started the <a href="https://kidsakoder.no/" rel="noopener noreferrer" target="_blank">&#8220;Lær Kidsa Koding&#8221;</a> movement in Norway. It is aimed at teaching kids to code, in many different arenas. At the moment, there is a (slow) push to get programming into schools, while there are also code clubs and code camps where kids can learn programming outside of school.</p>\n<p>There are great tools available for anybody wanting to learn programming today. In the code clubs I&#8217;ve been involved with, we have mainly used <a href="https://scratch.mit.edu/" rel="noopener noreferrer" target="_blank">Scratch</a>, <a href="https://www.microbit.org" rel="noopener noreferrer" target="_blank">Micro:Bit</a>, and Python. It&#8217;s been fun to also teach more specialized tools, like <a href="https://sonic-pi.net" rel="noopener noreferrer" target="_blank">Sonic Pi</a> for programming music, <a href="https://processing.org" rel="noopener noreferrer" target="_blank">Processing</a> for programming animations, and <a href="http://www.computercraft.info" rel="noopener noreferrer" target="_blank">ComputerCraft</a> for creating computers inside the MineCraft game and programming them.</p>\n<p>Teaching kids (and really anybody) programming is a very rewarding experience. Especially being around when things click, and you see them get a new concept, squash a nasty bug, or simply realize the power they have with their newfound knowledge. Some of favorite moments have been:</p>\n<ul>\n<li>seeing a kid finally figure out how to properly set up an electric circuit, and being so proud of making a LED light up that he ran around the room high-fiving everybody,,</li>\n<li>watching a 10-year old stand in front of 200 professional developers, telling them how a Micro:Bit microcontroller works, and how to create your own compass app on it,</li>\n<li>experiencing kids quickly develop actual understanding of the underlying logic, and being able to play with the parameters of their games to make it harder or more fun.</li>\n</ul>\n<p><strong>What challenges do you face when teaching kids / teachers to code?</strong></p>\n<p>I guess the main difference in teaching kids and others who have not been exposed to any earlier programming, is that I need to emphasize intuition over technicalities. In the beginning they want to see something happen, not be bogged down in a long lecture about variables, types, pointers and objects. With tools like Scratch and Micro:bit, it&#8217;s easy to get started, and just play around with the blocks to see what happens.</p>\n<p>Then at some point, the kids either don&#8217;t know how to do something they want to do, or don&#8217;t understand why the program is not behaving the way they expect. Being able to add to their intuition and understanding at that point, is a really interesting pedagogical exercise.</p>\n<p><strong>Is there anything else you’d like to say?</strong></p>\n<p>I do marvel at the power of open source, and the community&#8217;s ability to come together and create tools and resources that make us all better and more effective programmers. I&#8217;m very happy to add my small contributions to this ever-growing pool. I think initiatives like your interview series are great for showing the diversity in the community, and how everybody can participate at a level that works for them.</p>\n<p><strong>Thanks for doing the interview, Geir!</strong></p>\n</div><p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F24%2Fpydev-of-the-week-geir-arne-hjelle%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20Geir%20Arne%20Hjelle" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F24%2Fpydev-of-the-week-geir-arne-hjelle%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20Geir%20Arne%20Hjelle" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F24%2Fpydev-of-the-week-geir-arne-hjelle%2F&#038;title=PyDev%20of%20the%20Week%3A%20Geir%20Arne%20Hjelle" data-a2a-url="http://www.blog.pythonlibrary.org/2019/06/24/pydev-of-the-week-geir-arne-hjelle/" data-a2a-title="PyDev of the Week: Geir Arne Hjelle"></a></p><p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/24/pydev-of-the-week-geir-arne-hjelle/">PyDev of the Week: Geir Arne Hjelle</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}], 'wfw_commentrss': 'http://www.blog.pythonlibrary.org/2019/06/24/pydev-of-the-week-geir-arne-hjelle/feed/', 'slash_comments': '4'}, {'title': 'Book Contest: Creating GUI Applications with wxPython', 'title_detail': {'type': 'text/plain', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': 'Book Contest: Creating GUI Applications with wxPython'}, 'links': [{'rel': 'alternate', 'type': 'text/html', 'href': 'http://www.blog.pythonlibrary.org/2019/06/19/book-contest-creating-gui-applications-with-wxpython/'}], 'link': 'http://www.blog.pythonlibrary.org/2019/06/19/book-contest-creating-gui-applications-with-wxpython/', 'comments': 'http://www.blog.pythonlibrary.org/2019/06/19/book-contest-creating-gui-applications-with-wxpython/#comments', 'published': 'Wed, 19 Jun 2019 14:30:39 +0000', 'published_parsed': time.struct_time(tm_year=2019, tm_mon=6, tm_mday=19, tm_hour=14, tm_min=30, tm_sec=39, tm_wday=2, tm_yday=170, tm_isdst=0), 'authors': [{'name': 'Mike'}], 'author': 'Mike', 'author_detail': {'name': 'Mike'}, 'tags': [{'term': 'Books', 'scheme': None, 'label': None}, {'term': 'Python', 'scheme': None, 'label': None}, {'term': 'wxPython', 'scheme': None, 'label': None}], 'id': 'http://www.blog.pythonlibrary.org/?p=8487', 'guidislink': False, 'summary': '<p>Last month, I released a new book entitled Creating GUI Applications with wxPython. In celebration of a successful launch, I have decided to do a little contest. Rules Tweet about the contest and include my handle: @driscollis Send me a direct message on Twitter or via my contact form with a link to your Tweet &#8230; <a href="http://www.blog.pythonlibrary.org/2019/06/19/book-contest-creating-gui-applications-with-wxpython/" class="more-link">Continue reading <span class="screen-reader-text">Book Contest: Creating GUI Applications with wxPython</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/19/book-contest-creating-gui-applications-with-wxpython/">Book Contest: Creating GUI Applications with wxPython</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>', 'summary_detail': {'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<p>Last month, I released a new book entitled Creating GUI Applications with wxPython. In celebration of a successful launch, I have decided to do a little contest. Rules Tweet about the contest and include my handle: @driscollis Send me a direct message on Twitter or via my contact form with a link to your Tweet &#8230; <a href="http://www.blog.pythonlibrary.org/2019/06/19/book-contest-creating-gui-applications-with-wxpython/" class="more-link">Continue reading <span class="screen-reader-text">Book Contest: Creating GUI Applications with wxPython</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/19/book-contest-creating-gui-applications-with-wxpython/">Book Contest: Creating GUI Applications with wxPython</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}, 'content': [{'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<div class="pf-content"><p>Last month, I released a new book entitled <a href="https://leanpub.com/creatingapplicationswithwxpython/">Creating GUI Applications with wxPython</a>. In celebration of a successful launch, I have decided to do a little contest.</p>\n<p><a href="https://leanpub.com/creatingapplicationswithwxpython/"><img src="https://www.blog.pythonlibrary.org/wp-content/uploads/2019/03/fenix_with_title_150ppi-791x1024.jpg" alt="Cover art for Creating GUI Applications with wxPython" width="604" height="782" class="aligncenter size-large wp-image-8272" srcset="http://www.blog.pythonlibrary.org/wp-content/uploads/2019/03/fenix_with_title_150ppi-791x1024.jpg 791w, http://www.blog.pythonlibrary.org/wp-content/uploads/2019/03/fenix_with_title_150ppi-232x300.jpg 232w, http://www.blog.pythonlibrary.org/wp-content/uploads/2019/03/fenix_with_title_150ppi-768x994.jpg 768w, http://www.blog.pythonlibrary.org/wp-content/uploads/2019/03/fenix_with_title_150ppi.jpg 1275w" sizes="(max-width: 604px) 100vw, 604px" /></a></p>\n<h3>Rules</h3>\n<ul>\n<li>Tweet about the contest and include my handle: <strong>@driscollis</strong></li>\n<li>Send me a direct message on <a href="https://twitter.com/driscollis" target="_blank" rel="noopener noreferrer">Twitter</a> or via my <a href="https://www.blog.pythonlibrary.org/contact/" target="_blank" rel="noopener noreferrer">contact form</a> with a link to your Tweet</li>\n<li>If you don&#8217;t have Twitter, feel free to message me through the website and I&#8217;ll enter you anyway</li>\n</ul>\n<p>The contest will run starting now until <strong>Friday, June 21st @ 11:59 p.m. CST</strong>.</p>\n<p>Runners up will receive a free copy of the eBook. The<strong> grand prize</strong> will be a signed paperback copy + the eBook version!</p>\n</div><p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F19%2Fbook-contest-creating-gui-applications-with-wxpython%2F&amp;linkname=Book%20Contest%3A%20Creating%20GUI%20Applications%20with%20wxPython" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F19%2Fbook-contest-creating-gui-applications-with-wxpython%2F&amp;linkname=Book%20Contest%3A%20Creating%20GUI%20Applications%20with%20wxPython" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F19%2Fbook-contest-creating-gui-applications-with-wxpython%2F&#038;title=Book%20Contest%3A%20Creating%20GUI%20Applications%20with%20wxPython" data-a2a-url="http://www.blog.pythonlibrary.org/2019/06/19/book-contest-creating-gui-applications-with-wxpython/" data-a2a-title="Book Contest: Creating GUI Applications with wxPython"></a></p><p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/19/book-contest-creating-gui-applications-with-wxpython/">Book Contest: Creating GUI Applications with wxPython</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}], 'wfw_commentrss': 'http://www.blog.pythonlibrary.org/2019/06/19/book-contest-creating-gui-applications-with-wxpython/feed/', 'slash_comments': '1'}, {'title': 'PyDev of the Week: Meredydd Luff', 'title_detail': {'type': 'text/plain', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': 'PyDev of the Week: Meredydd Luff'}, 'links': [{'rel': 'alternate', 'type': 'text/html', 'href': 'http://www.blog.pythonlibrary.org/2019/06/17/pydev-of-the-week-meredydd-luff/'}], 'link': 'http://www.blog.pythonlibrary.org/2019/06/17/pydev-of-the-week-meredydd-luff/', 'comments': 'http://www.blog.pythonlibrary.org/2019/06/17/pydev-of-the-week-meredydd-luff/#comments', 'published': 'Mon, 17 Jun 2019 05:05:14 +0000', 'published_parsed': time.struct_time(tm_year=2019, tm_mon=6, tm_mday=17, tm_hour=5, tm_min=5, tm_sec=14, tm_wday=0, tm_yday=168, tm_isdst=0), 'authors': [{'name': 'Mike'}], 'author': 'Mike', 'author_detail': {'name': 'Mike'}, 'tags': [{'term': 'PyDevOfTheWeek', 'scheme': None, 'label': None}, {'term': 'Python', 'scheme': None, 'label': None}], 'id': 'http://www.blog.pythonlibrary.org/?p=8332', 'guidislink': False, 'summary': '<p>This week we welcome Meredydd Luff (@meredydd) as our PyDev of the Week! Meredydd is the co-founder of Anvil and a core developer for the Skulpt package. You can learn more about Meredydd on his website. Let&#8217;s take a few moments to get to know him better! Can you tell us a little about yourself &#8230; <a href="http://www.blog.pythonlibrary.org/2019/06/17/pydev-of-the-week-meredydd-luff/" class="more-link">Continue reading <span class="screen-reader-text">PyDev of the Week: Meredydd Luff</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/17/pydev-of-the-week-meredydd-luff/">PyDev of the Week: Meredydd Luff</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>', 'summary_detail': {'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<p>This week we welcome Meredydd Luff (@meredydd) as our PyDev of the Week! Meredydd is the co-founder of Anvil and a core developer for the Skulpt package. You can learn more about Meredydd on his website. Let&#8217;s take a few moments to get to know him better! Can you tell us a little about yourself &#8230; <a href="http://www.blog.pythonlibrary.org/2019/06/17/pydev-of-the-week-meredydd-luff/" class="more-link">Continue reading <span class="screen-reader-text">PyDev of the Week: Meredydd Luff</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/17/pydev-of-the-week-meredydd-luff/">PyDev of the Week: Meredydd Luff</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}, 'content': [{'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<div class="pf-content"><p>This week we welcome Meredydd Luff (<a href="https://twitter.com/meredydd" rel="noopener noreferrer" target="_blank">@meredydd</a>) as our PyDev of the Week! Meredydd is the co-founder of <a href="https://anvil.works/" rel="noopener noreferrer" target="_blank">Anvil</a> and a core developer for the <a href="http://www.skulpt.org/" rel="noopener noreferrer" target="_blank">Skulpt</a> package. You can learn more about Meredydd on his <a href="http://blog.senatehouse.org/p/about-meredydd.html" rel="noopener noreferrer" target="_blank">website</a>. Let&#8217;s take a few moments to get to know him better!</p>\n<p><strong>Can you tell us a little about yourself (hobbies, education, etc):</strong></p>\n<p>I’ve loved programming since I was first introduced to BASIC at the age of 7. I come from Cambridge (the old one in the UK, not the relatively-new one near Boston), and I studied here too. I actually started out as a biologist, but then switched to computer science for my PhD.</p>\n<p>I think programming is the closest thing to magic we have, and I love watching and helping people get their hands on this power. My PhD research was about building usable parallel programming systems, and now I work on <a href="https://anvil.works/" rel="noopener noreferrer" target="_blank">Anvil</a>, a tool to make web programming faster and easier for everyone (with Python!).</p>\n<p>When I’m not programming, I fly light aeroplanes, which I guess is what happens when your inner six-year-old makes your life decisions. I used to dance competitively (including a few years on England’s top Latin formation team), but it turns out international competitions and startups don’t play well together, so the startup won.<br />\n<span id="more-8332"></span></p>\n<p><strong>Why did you start using Python?</strong></p>\n<p>I’d dabbled in Python a bit, but I only really started using it in earnest when we started creating Anvil. We wanted to make web development easier, by replacing the mess of five(!) different programming languages with one language and a sensible visual designer. Python was the obvious choice &#8211; it’s accessible, it’s predictable, and it has a huge and powerful ecosystem.</p>\n<p><strong>What other programming languages do you know and which is your favorite?</strong></p>\n<p>I’m a big fan of Clojure. It’s sort of the diametrical opposite of Python. Python is simple, concrete and predictable &#8211; it&#8217;s really a programming language designed for people. By contrast, Lisps like Clojure turn the abstraction up to 11, and make the person program like the compiler thinks.</p>\n<p>I also have to tip my hat to C &#8211; if I’m using C, I must be having an adventure close to the hardware <img src="https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n<p><strong>What projects are you working on now?</strong></p>\n<p>These days I spend all my time on <a href="https://anvil.works/" rel="noopener noreferrer" target="_blank">Anvil</a>, a platform for building full-stack web apps with nothing but Python. There’s a drag-and-drop designer for your UIs, we run your client-side Python in the browser, and your server-side Python runs in our own serverless environment. We even have a Python-native database you can use.</p>\n<p>So, whereas previously you’d need to learn HTML+CSS+JS+Python+SQL (plus all the frameworks, AWS, etc), now anyone who can write Python can build and deploy a web application with Anvil.</p>\n<p><strong>Which Python libraries are your favorite (core or 3rd party)?</strong></p>\n<p>It’s tough, but I’d have to choose <a href="http://www.skulpt.org/" rel="noopener noreferrer" target="_blank">Skulpt</a>, the Python-to-Javascript compiler. We’d used before in an educational context, but we use it really heavily in Anvil. Obviously Skulpt is how we run client-side Python in the browser, but we use it in other ways too &#8211; for example, we use Skulpt’s parser to drive our Python code completion! (I <a href="https://anvil.works/blog/python-autocompleter-pycon17" rel="noopener noreferrer" target="_blank">talked briefly about how our Python autocompleter works</a> at PyCon UK.)</p>\n<p>I’m one of the core maintainers these days &#8211; I’m currently working on a tear-down-and-rebuild of the front end, which is great fun for compiler nerds. If you want to join in, please drop us a line on GitHub!</p>\n<p><strong>Where did the idea behind Skulpt come from?</strong></p>\n<p>I can’t claim credit for Skulpt’s existence &#8211; the project was started by Scott Graham, and these days there’s a whole team of us. The original impetus was around education: When you’re first learning to code, setting up a Python environment is a big hassle, and so having a playground “just there” in the browser is a massive win. I suppose Anvil is one step further &#8211; we put a full-strength application development and deployment platform “just there” in your browser.</p>\n<p><strong>Can you tell us the story behind Anvil?</strong></p>\n<p>My cofounder Ian and I both learned to program using Visual Basic and similar tools. The 90s were a sort of golden age for that: Anyone who could use one (fairly simple) programming language could build apps that looked and worked like everything else on their desktop.</p>\n<p>These days, everything is on the web, but the barrier to entry is huge: you need to learn all these languages and frameworks, plus Linux system administration, just to build your first app. It’s exhausting &#8211; and it cuts off so much opportunity for people like data scientists or electronic engineers, who have a job to do and don’t have time to learn all that stuff. Eventually, Ian and I got fed up of moaning about the situation, and decided to build something to fix it!</p>\n<p>Anvil’s goal is to make web programming usable by everyone, but still powerful enough for seasoned professionals. We cut out the incidental complexity, but we keep the powerful programming language and the huge ecosystem.</p>\n<p><strong>Is there anything else you’d like to say?</strong></p>\n<p>Oh, yes &#8211; <a href="https://anvil.works/blog/python-autocompleter-pycon17" rel="noopener noreferrer" target="_blank">Use autocomplete</a>!</p>\n<p><strong>Thanks for doing the interview, Meredydd!</strong></p>\n</div><p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F17%2Fpydev-of-the-week-meredydd-luff%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20Meredydd%20Luff" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F17%2Fpydev-of-the-week-meredydd-luff%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20Meredydd%20Luff" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F17%2Fpydev-of-the-week-meredydd-luff%2F&#038;title=PyDev%20of%20the%20Week%3A%20Meredydd%20Luff" data-a2a-url="http://www.blog.pythonlibrary.org/2019/06/17/pydev-of-the-week-meredydd-luff/" data-a2a-title="PyDev of the Week: Meredydd Luff"></a></p><p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/17/pydev-of-the-week-meredydd-luff/">PyDev of the Week: Meredydd Luff</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}], 'wfw_commentrss': 'http://www.blog.pythonlibrary.org/2019/06/17/pydev-of-the-week-meredydd-luff/feed/', 'slash_comments': '4'}, {'title': 'PyDev of the Week:  Valentin Haenel', 'title_detail': {'type': 'text/plain', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': 'PyDev of the Week:  Valentin Haenel'}, 'links': [{'rel': 'alternate', 'type': 'text/html', 'href': 'http://www.blog.pythonlibrary.org/2019/06/10/pydev-of-the-week-valentin-haenel/'}], 'link': 'http://www.blog.pythonlibrary.org/2019/06/10/pydev-of-the-week-valentin-haenel/', 'comments': 'http://www.blog.pythonlibrary.org/2019/06/10/pydev-of-the-week-valentin-haenel/#comments', 'published': 'Mon, 10 Jun 2019 05:05:56 +0000', 'published_parsed': time.struct_time(tm_year=2019, tm_mon=6, tm_mday=10, tm_hour=5, tm_min=5, tm_sec=56, tm_wday=0, tm_yday=161, tm_isdst=0), 'authors': [{'name': 'Mike'}], 'author': 'Mike', 'author_detail': {'name': 'Mike'}, 'tags': [{'term': 'PyDevOfTheWeek', 'scheme': None, 'label': None}, {'term': 'Python', 'scheme': None, 'label': None}], 'id': 'http://www.blog.pythonlibrary.org/?p=8337', 'guidislink': False, 'summary': '<p>This week we welcome Valentin Haenel (@esc___) as our PyDev of the Week! Valentin is a core developer of Numba and several other packages that you can see either on his website or on Github. He has also given several talks at various conferences in Europe. Let&#8217;s spend some time getting to know Valentin better! &#8230; <a href="http://www.blog.pythonlibrary.org/2019/06/10/pydev-of-the-week-valentin-haenel/" class="more-link">Continue reading <span class="screen-reader-text">PyDev of the Week:  Valentin Haenel</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/10/pydev-of-the-week-valentin-haenel/">PyDev of the Week:  Valentin Haenel</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>', 'summary_detail': {'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<p>This week we welcome Valentin Haenel (@esc___) as our PyDev of the Week! Valentin is a core developer of Numba and several other packages that you can see either on his website or on Github. He has also given several talks at various conferences in Europe. Let&#8217;s spend some time getting to know Valentin better! &#8230; <a href="http://www.blog.pythonlibrary.org/2019/06/10/pydev-of-the-week-valentin-haenel/" class="more-link">Continue reading <span class="screen-reader-text">PyDev of the Week:  Valentin Haenel</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/10/pydev-of-the-week-valentin-haenel/">PyDev of the Week:  Valentin Haenel</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}, 'content': [{'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<div class="pf-content"><p>This week we welcome Valentin Haenel (<a href="https://twitter.com/esc___" rel="noopener noreferrer" target="_blank">@esc___</a>) as our PyDev of the Week! Valentin is a core developer of <a href="http://numba.pydata.org/" rel="noopener noreferrer" target="_blank">Numba</a> and several other packages that you can see either on his <a href="http://haenel.co/" rel="noopener noreferrer" target="_blank">website</a> or on <a href="https://github.com/esc" rel="noopener noreferrer" target="_blank">Github</a>. He has also given several talks at various conferences in Europe. Let&#8217;s spend some time getting to know Valentin better!</p>\n<p><strong>Can you tell us a little about yourself (hobbies, education, etc):</strong></p>\n<p>I went to the University of Edinburgh to get a bachelor in computer science and to the Bernstein Center in Berlin to get a master in computational neuroscience. I tend to favour more traditional computer science topics these days such as compression algorithms and compilers. In my spare time, I spend time with my lovely wife Gloria, fly quad-line sports kites and ride longboards through Berlin.  I&#8217;ve been doing Python and open-source on Github for about 10 years.<span id="more-8337"></span></p>\n<p><strong>Why did you start using Python?</strong></p>\n<p>I first started using Python as part of my Masters program. Python was&#8212;and still is&#8212;quite popular in computational neuroscience, both for doing machine learning on sensor data such as EEG and fMRI and also for simulating neural models and networks of neurons. I had been using Java before and it took some getting used to the dynamic (duck) typing style. As part of the academic work I came in touch with the early scientific stack, which at the time consisted mostly of Numpy, Scipy, Matplotlib and the command-line IPython shell. Some of my earliest Python work from that time still survives. A project I did to simulate spiking neurons using a specific type of model:</p>\n<p><a href="https://github.com/esc/molif" rel="noopener noreferrer" target="_blank">https://github.com/esc/molif</a> &#8212; this was my first github repo ever.  </p>\n<p>Also from that time is the first of my packages to make it into Debian, a Python interface to a specific type of <a href="https://github.com/esc/pyoptical" rel="noopener noreferrer" target="_blank">hardware photometer</a>. In fact, I just checked on this Ubuntu machine (Mar 2019), the package is still available:</p>\n<pre class="python">$ apt search pyoptical\n  Sorting... <span style="color: black;">Done</span>\n  Full Text Search... <span style="color: black;">Done</span>\n  python-pyoptical/bionic,bionic <span style="color: #ff4500;">0.4</span><span style="color: #ff4500;">-1.1</span> all\n    python interface to the CRS <span style="color: #483d8b;">\'OptiCAL\'</span> photometer\n&nbsp;\n  :<span style="color: black;">&#41;</span></pre>\n<p><strong>What other programming languages do you know and which is your favorite?</strong></p>\n<p>I know a little C, shell, go and Java, but Python is by far my favorite though. A friend of mine is working on a secret programming language project called &#8216;@&#8217;, which aims to be&#8230; well&#8230; runtime only &#8212; very intriguing.</p>\n<p><strong>What projects are you working on now?</strong></p>\n<p>I am now working on <a href="https://numba.pydata.org/" rel="noopener noreferrer" target="_blank">Numba</a> for Anaconda Inc. Besides that, I am also working on Blosc (http://blosc.org/) including <a href="http://python-blosc.blosc.org/" rel="noopener noreferrer" target="_blank">python-blosc</a> and <a href="https://github.com/blosc/bloscpack" rel="noopener noreferrer" target="_blank">Bloscpack</a>. In addition, there are a few smaller, but somewhat popular, projects that I run by myself, namely <a href="https://wiki2beamer.github.io/" rel="noopener noreferrer" target="_blank">wiki2beamer</a>, <a href="https://github.com/esc/git-big-picture" rel="noopener noreferrer" target="_blank">git-big-picture</a>, <a href="https://github.com/esc/conda-zsh-completion" rel="noopener noreferrer" target="_blank">conda-zsh-complation</a> and <a href="https://github.com/esc/yadoma" rel="noopener noreferrer" target="_blank">yadoma</a>. Most recently, I have been getting more interested in time tracking and stared using and contributing to <a href="https://faereld.readthedocs.io/en/latest/" rel="noopener noreferrer" target="_blank">Færeld</a>.</p>\n<p><strong>Which Python libraries are your favorite (core or 3rd party)?</strong></p>\n<p>I have always had an interest in crafting command line interfaces. I have looked into many libraries for this task such as getopt, optparse, argparse, bup/options.py, miniparser, opster, blargs, plac, begins and click (have I forgot any?!). However, the one library that I keep coming back to and the one that I recommend over all others is docopt: http://docopt.org/ . There is something to be said about designing your command line interface as a program synopsis and then getting a fully fledged parser from just that. For me personally, this is the fastest and  most natural, intuitive and convenient way to construct a command line argument parser. If you are not aware of it yet, you should definitely go and check it out!</p>\n<p><strong>How you get involved with Numba? </strong></p>\n<p>I saw an opening for a software engineering position at Anaconda Inc. doing mostly open source work on Numba. Working low-level and on a compiler is right down my alley and was something I had been wanting to do for a very long time. I applied, they made me an offer, the rest is history.</p>\n<p><strong>Can you explain why you would use Numba versus PyPy or Cython?</strong></p>\n<p>Cython is a superset of Python, it has additional syntax that allows for static typing which will then compile the code to run at C-speed, a.k.a to &#8220;cythonize&#8221; the code. That code can no longer run as regular Python code.  Numba is much less invasive than this but has a similar goal. It provides the `@jit` decorator which allows Numba to perform Just In Time (JIT) type inference and compilation using the LLVM compiler infrastructure under the hood. Importantly, it does this on the Python bytecode, does not require any types to be annotated and the code can continue to run as regular Python (once you comment out the `@jit` decorator.) This has the advantage, that you can ship portable numeric code as pure Python with only Numba as a dependency which will significantly reduce your packaging and distribution overhead. Both Cython and Numba have been used in the scientific space traditionally. This is because they interact well with the existing ecosystem, the native libraries (where Cython can even interface with C++ which Numba can not) and are designed to be strongly aware of Numpy. So those are the ones you would use when working in that space: for example machine learning and broadly speaking any scientific algorithms and simulations.  PyPy on the other hand has traditionally not had good support for the whole scientific stack. It is a bit better nowadays (early 2019) as both Numpy and Pandas can be compiled and a lot of work has gone into<br />\nmaking <a href="https://morepypy.blogspot.com/2018/09/inside-cpyext-why-emulating-cpython-c.html?m=1" rel="noopener noreferrer" target="_blank">c-extensions work in PyPy</a>. </p>\n<p>Anyway, the primary goal of PyPy focuses on moving beyond CPython (the C implementation of the Python interpreter) as a base for a Python programs and it is slowly but surely getting there.</p>\n<p>So, in  conclusion: PyPy is the future of the Python language in general but it is not quite ready for data-intensive applications. If you want to have as much computational efficiency as possible today, then both Numba and Cython are good choices. Numba is very easy to try out&#8212;just decorate your bottlenecks&#8212;and has been known to accelerate code by one or two orders of magnitude.</p>\n<p><strong>What advice do you have for new people who want to start helping an open source project?</strong></p>\n<p>Go find yourself an itch; find a project in whatever your favorite language that you find personally useful and improve it. Then, contribute your changes back. Chances are, if it is useful for you, it will be useful for other people. Also, because it is useful to you personally, you are likely to continue contributing to it because you end up having a vested interest in it. And so obviously, personal utilities are a great category to go looking for such tools. Find something that is useful for you on a day-to-day basis and contribute to that. Also, don&#8217;t be afraid to put your code out there in the open and don&#8217;t let yourself be discouraged if your contributions are rejected, you are just at the beginning of your journey, so keep going. Good luck!</p>\n<p><strong>Is there anything else you’d like to say?</strong></p>\n<p>A big thank you goes out to all the open source/free software developers and contributors out there. I am very proud to be a part of this fantastic and inspirational community.</p>\n<p><strong>Thanks for doing the interview, Valentin!</strong></p>\n</div><p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F10%2Fpydev-of-the-week-valentin-haenel%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20%20Valentin%20Haenel" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F10%2Fpydev-of-the-week-valentin-haenel%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20%20Valentin%20Haenel" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F10%2Fpydev-of-the-week-valentin-haenel%2F&#038;title=PyDev%20of%20the%20Week%3A%20%20Valentin%20Haenel" data-a2a-url="http://www.blog.pythonlibrary.org/2019/06/10/pydev-of-the-week-valentin-haenel/" data-a2a-title="PyDev of the Week:  Valentin Haenel"></a></p><p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/10/pydev-of-the-week-valentin-haenel/">PyDev of the Week:  Valentin Haenel</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}], 'wfw_commentrss': 'http://www.blog.pythonlibrary.org/2019/06/10/pydev-of-the-week-valentin-haenel/feed/', 'slash_comments': '2'}, {'title': 'Book Review: Practical Python and OpenCV', 'title_detail': {'type': 'text/plain', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': 'Book Review: Practical Python and OpenCV'}, 'links': [{'rel': 'alternate', 'type': 'text/html', 'href': 'http://www.blog.pythonlibrary.org/2019/06/06/book-review-practical-python-and-opencv/'}], 'link': 'http://www.blog.pythonlibrary.org/2019/06/06/book-review-practical-python-and-opencv/', 'comments': 'http://www.blog.pythonlibrary.org/2019/06/06/book-review-practical-python-and-opencv/#comments', 'published': 'Thu, 06 Jun 2019 05:05:41 +0000', 'published_parsed': time.struct_time(tm_year=2019, tm_mon=6, tm_mday=6, tm_hour=5, tm_min=5, tm_sec=41, tm_wday=3, tm_yday=157, tm_isdst=0), 'authors': [{'name': 'Mike'}], 'author': 'Mike', 'author_detail': {'name': 'Mike'}, 'tags': [{'term': 'Books', 'scheme': None, 'label': None}, {'term': 'Python', 'scheme': None, 'label': None}], 'id': 'http://www.blog.pythonlibrary.org/?p=8433', 'guidislink': False, 'summary': '<p>I bought Practical Python and OpenCV a couple of years ago during one of its authors Kickstarters. I started reading it and then got busy with other things. The past couple of weeks, I decided to give the book another go and was able to finish it. Note that I started reading the 3rd edition &#8230; <a href="http://www.blog.pythonlibrary.org/2019/06/06/book-review-practical-python-and-opencv/" class="more-link">Continue reading <span class="screen-reader-text">Book Review: Practical Python and OpenCV</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/06/book-review-practical-python-and-opencv/">Book Review: Practical Python and OpenCV</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>', 'summary_detail': {'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<p>I bought Practical Python and OpenCV a couple of years ago during one of its authors Kickstarters. I started reading it and then got busy with other things. The past couple of weeks, I decided to give the book another go and was able to finish it. Note that I started reading the 3rd edition &#8230; <a href="http://www.blog.pythonlibrary.org/2019/06/06/book-review-practical-python-and-opencv/" class="more-link">Continue reading <span class="screen-reader-text">Book Review: Practical Python and OpenCV</span> <span class="meta-nav">&#8594;</span></a></p>\n<p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/06/book-review-practical-python-and-opencv/">Book Review: Practical Python and OpenCV</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}, 'content': [{'type': 'text/html', 'language': None, 'base': 'http://www.blog.pythonlibrary.org/feed/', 'value': '<div class="pf-content"><p>I bought <a href="https://www.pyimagesearch.com/practical-python-opencv/" rel="noopener noreferrer" target="_blank">Practical Python and OpenCV</a> a couple of years ago during one of its authors Kickstarters. I started reading it and then got busy with other things. The past couple of weeks, I decided to give the book another go and was able to finish it. Note that I started reading the 3rd edition of the book without realizing there was a 4th edition. After finished the 3rd edition, I compared it to the 4th side by side and it looks like they are nearly identical, so I don&#8217;t think it matters all that much.</p>\n<hr />\n<h3>Quick Review</h3>\n<ul>\n<li><strong>Why I picked it up:</strong> Computer vision / machine learning sounds interesting to me and the author has a fun blog</strong> </li>\n<li><strong>Why I finished it:</strong> It&#8217;s short and the writing style is engaging</strong> </li>\n<li><strong>I’d give it to:</strong> Anyone looking to get started with OpenCV in Python </li>\n</ul>\n<p><span id="more-8433"></span></p>\n<hr />\n<h3>Book Formats</h3>\n<p>You can get this book as a hard cover, PDF, or Mobi.</p>\n<hr />\n<h3>Book Contents</h3>\n<p>This book contains 11 chapters across 169 pages. It covers Python 3 and OpenCV 4 in the 4th edition.</p>\n<hr />\n<h3>Full Review</h3>\n<p><a href="https://www.pyimagesearch.com/practical-python-opencv/" rel="noopener noreferrer" target="_blank">Practical Python and OpenCV</a> is an interesting book. It&#8217;s shorter than your normal technical book, but it covers a lot of ground. This is kind of an anomaly as a lot of technical books seem to be much longer. Anyway, let&#8217;s go over the book piece by piece.</p>\n<p>Chapter one is just an introduction. It describes what computer vision is an gives some examples. Then chapter two jumps in and teaches you how to install the packages you need to use the book effectively. Personally I think these two chapters could have been combined or the installation chapter could have been an appendix. But no matter.</p>\n<p>Chapter three is where you will finally get into some code. Here you learn how to load images into OpenCV and display them to the user. You will also learn how to save the image. This is useful for converting between different image formats, but more importantly it is helpful for saving off your data when you need to.</p>\n<p>In the fourth chapter, you learn the basics of images from the point of view of OpenCV. You will learn its coordinate system, as well as how to access and manipulate individual pixels in an image.</p>\n<p>Then in chapter five, you discover how to draw lines, rectangles and circles. You can change the width, position, and color of each of these shapes. You can also stack the shapes on each other.</p>\n<p>Chapter six covers the topic of image processing. Here you will learn all about image transformations (translation, rotation, resizing, etc), image arithmetic, bitwise operations, masking, splitting, merging and the importance of color spaces (RGB vs BGR and HSV).</p>\n<p>For chapter seven, you will learn how to use histograms effectively in OpenCV. The histogram will help you determine the contrast, brightness and intensity distributions of the images that you are working with. OpenCV supports working with grayscale and color histograms. You will also learn about histogram equalization and masks.</p>\n<p>Chapter eight explains the different types of blurring and smoothing that OpenCV can do. Here you will learn about Gaussian, Median and Bilateral blurring. Adrian doesn&#8217;t go into a lot of depth explaining these topics. He instead opts to show the reader how to do each of them using small code snippets.</p>\n<p>Chapter nine covers the topic of thresholding, which is the binarization of images. Thresholding is the term used to describe focusing on objects or areas of interest within an image. Adrian uses a photo of some coins for this chapter and the rest of the book. You end up using thresholding to find the coins in the photos.</p>\n<p>Then in chapter ten, you learn how to use gradients and edge detection to refine what you learned in chapter nine. This will allow you to find the edges of the coins in the photo. This chapter focuses on using the Laplacian and Sobel methods for gradients. Then you learn about using the Canny Edge detection technique.</p>\n<p>To wrap up the book, Adrian uses OpenCV to find the contours of the coins so that he can count the coins in the image. He also talks about the differences that exist between OpenCV versions when it comes to finding contours.</p>\n<p>This book covers a lot of different topics very quickly. There are some minor layout issues in my mind in that sometimes he refers to an image that either doesn&#8217;t appear soon or was inexplicably shown earlier in the chapter. There are also a couple of occasions where he is explaining some code that is not on the page. However these things don&#8217;t affect the quality of the code examples themselves. You also get a Case Studies PDF that has more information. </p>\n<p>Overall, I think this is a pretty good book. The examples are fun and fast paced and seeing dinosaurs in a Python book is always fun. The book is kind of pricey though.</p>\n<table>\n<tbody>\n<tr>\n<td><img src="https://www.blog.pythonlibrary.org/wp-content/uploads/2019/05/practical_python_opencv-212x300.png" alt="Practical Python and OpenCV cover" width="212" height="300" class="aligncenter size-medium wp-image-8463" /></td>\n<td>\n<h3>Practical Python and OpenCV</h3>\n<p>by Dr. Adrian Rosebrock</p>\n<p><strong><a href="https://www.pyimagesearch.com/practical-python-opencv/" target="_blank" rel="noopener noreferrer">PyImagesearch</a></strong>\n</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3>Other Book Reviews</h3>\n<ul>\n<li><a href="http://www.blog.pythonlibrary.org/2019/03/20/book-review-mission-python/" rel="noopener noreferrer" target="_blank">Mission Python</a> by Sean McManus</li>\n<li><a href="http://www.blog.pythonlibrary.org/2019/03/06/book-review-serious-python/" rel="noopener noreferrer" target="_blank">Serious Python: Black-Belt Advice on Deployment, Scalability, Testing, and More</a> by Julien Danjou</li>\n<li><a href="http://www.blog.pythonlibrary.org/2017/11/14/book-review-python-testing-with-pytest/" rel="noopener noreferrer" target="_blank">Python Testing with pytest</a> by Brian Okken</li>\n<li><a href="http://www.blog.pythonlibrary.org/2016/06/15/book-review-modular-programming-with-python/" target="_blank" rel="noopener noreferrer">Module Programming with Python</a> by Erik Westra</li>\n<li><a href="http://www.blog.pythonlibrary.org/2015/12/11/book-review-python-playground-geeky-projects-for-the-curious-programmer/" target="_blank" rel="noopener noreferrer">Python Playground – Geeky Projects for the Curious Programmer</a> by Mahesh Venkitachalam</li>\n<li><a href="http://www.blog.pythonlibrary.org/2014/12/04/ebook-review-ipython-notebook-essentials/" target="_blank" rel="noopener noreferrer">IPython Notebook Essentials</a> by L. Felipe Martins</li>\n</ul>\n</div><p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F06%2Fbook-review-practical-python-and-opencv%2F&amp;linkname=Book%20Review%3A%20Practical%20Python%20and%20OpenCV" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F06%2Fbook-review-practical-python-and-opencv%2F&amp;linkname=Book%20Review%3A%20Practical%20Python%20and%20OpenCV" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2019%2F06%2F06%2Fbook-review-practical-python-and-opencv%2F&#038;title=Book%20Review%3A%20Practical%20Python%20and%20OpenCV" data-a2a-url="http://www.blog.pythonlibrary.org/2019/06/06/book-review-practical-python-and-opencv/" data-a2a-title="Book Review: Practical Python and OpenCV"></a></p><p>The post <a rel="nofollow" href="http://www.blog.pythonlibrary.org/2019/06/06/book-review-practical-python-and-opencv/">Book Review: Practical Python and OpenCV</a> appeared first on <a rel="nofollow" href="http://www.blog.pythonlibrary.org">The Mouse Vs. The Python</a>.</p>'}], 'wfw_commentrss': 'http://www.blog.pythonlibrary.org/2019/06/06/book-review-practical-python-and-opencv/feed/', 'slash_comments': '1'}], 'bozo': 0, 'headers': {'Date': 'Mon, 22 Jul 2019 03:36:47 GMT', 'Server': 'Apache', 'Vary': 'Accept-Encoding,Cookie,User-Agent', 'X-Powered-By': 'PHP/5.6.40', 'X-Robots-Tag': 'noindex, follow', 'Link': '<http://www.blog.pythonlibrary.org/wp-json/>; rel="https://api.w.org/"', 'Upgrade': 'h2,h2c', 'Connection': 'Upgrade, close', 'ETag': '"233a4a11c65f7bdb6577ed7b68c7b039-gzip"', 'Content-Encoding': 'gzip', 'Content-Length': '28475', 'Content-Type': 'application/rss+xml; charset=UTF-8'}, 'etag': '"233a4a11c65f7bdb6577ed7b68c7b039-gzip"', 'href': 'http://www.blog.pythonlibrary.org/feed/', 'status': 200, 'encoding': 'UTF-8', 'version': 'rss20', 'namespaces': {'content': 'http://purl.org/rss/1.0/modules/content/', 'wfw': 'http://wellformedweb.org/CommentAPI/', 'dc': 'http://purl.org/dc/elements/1.1/', '': 'http://www.w3.org/2005/Atom', 'sy': 'http://purl.org/rss/1.0/modules/syndication/', 'slash': 'http://purl.org/rss/1.0/modules/slash/'}}
